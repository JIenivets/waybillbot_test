import logging
from aiogram import Bot, types, executor, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

import keys, run, savelog, preparationforloadinginGoogleSheets, work_with_db, forsaveindb, statistics
from datetime import timedelta, datetime

import asyncio, aioschedule

logging.basicConfig(level=logging.INFO)
bot = Bot(token="1857693188:AAELRZ00g2A_lQaX5jx8ugw8W7FDA16-l7Y")
dp = Dispatcher(bot)

date_send_mileage = 20
cd_time = 1200
send_mileage_user_list = {}
button_names = {
    "get_number": '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä',
    "truck": '–î–ª—è –≥—Ä—É–∑–æ–≤–æ–≥–æ',
    "car": '–î–ª—è –ª–µ–≥–∫–æ–≤–æ–≥–æ',
    "send_mileage": '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥',
    "back": '<< –ù–∞–∑–∞–¥'
}

button_back = KeyboardButton(button_names['back'])
backKB = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
backKB.add(button_back)


# inline_btn_1 = InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data='accept')
# inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)


class LenError(Exception):
    pass


# –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    if str(message['from']["id"]) not in run.gettable("COLUMNS", "–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π!A2:A")[0]:   # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ
        keys.new_user(message['from']["id"])  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è –≤ keys.json
        # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
        answer_text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë  –§–ò–û'
        await message.answer(answer_text)
        savelog.alllog("bot_message", answer_text,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                       answer=(message.from_user.first_name, message.from_user.id))
        keys.set_key(message['from']["id"], "reg")  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    else:
        await message.answer(f'{message.from_user.full_name}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º', reply_markup=await keybord_generetion(message.from_user.id))


@dp.message_handler(commands=['mailing'])
async def mailing(message: types.Message):
    users = ["574802415", "54436582"]
    for us in users:
        await bot.send_message(us, '–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏üëÄ')


@dp.message_handler(commands=['newuser'])
async def mailing(message: types.Message):
    settigs = message.text.split()
    # await message.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {settigs[1]} –ø–∞—Ä–∞–º–µ—Ç—Ä {settigs[2]} –∏–∑–º–µ–Ω—ë–Ω —Å {keys.return_keys(settigs[1])[settigs[2]]} –Ω–∞ {settigs[3:]} ‚úÖ')
    # keys.set_parametr(settigs[1], settigs[2], settigs[3:])
    await bot.send_message(settigs[1], '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞—Ç–æ–±–∞–Ω–∞', reply_markup=await keybord_generetion(settigs[1]))


@dp.message_handler(commands=['status'])
async def status(message: types.Message):
    await message.answer(f"""===========  –°—Ç–∞—Ç—É—Å  ===========\n
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {statistics.stat['cout_new_messages']}\n
    –ì—Ä—É–∑–æ–≤—ã—Ö: {statistics.stat['truck']['number_of_new_messages']}
    –õ–µ–≥–∫–æ–≤—ã—Ö: {statistics.stat['car']['number_of_new_messages']}\n
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n
–ü–æ—Å–ª–µ–¥–Ω–µ–µ:\n
    –ì—Ä—É–∑–æ–≤—ã–µ:\n
        –ù–æ–º–µ—Ä: {statistics.stat['truck']['last_number']}
        –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: 
        {statistics.stat['truck']['time_last_message']}
        –ò–º—è: {statistics.stat['truck']['last_recipients_name']}\n
    –õ–µ–≥–∫–æ–≤—ã–µ:\n
        –ù–æ–º–µ—Ä: {statistics.stat['car']['last_number']}
        –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: 
        {statistics.stat['car']['time_last_message']}
        –ò–º—è: {statistics.stat['car']['last_recipients_name']}""")
    statistics.stat['cout_new_messages'] = 0


@dp.message_handler(commands=['test'])
async def test(message: types.Message):
    await bot.send_photo(message.from_user.id, 'asd')


# @dp.callback_query_handler(func=lambda c: c.data == 'accept')
# async def process_callback_button1(callback_query: types.CallbackQuery):
#     await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')


async def send_message(text_message=None, recipient='574802415', photo=None, keyboard=None):
    if photo is not None:
        await bot.send_photo(recipient, photo=open(f'photo/{photo}', 'rb'))

    if text_message is not None:
        await bot.send_message(recipient, text_message, reply_markup=keyboard)


async def keybord_generetion(tg_id, type="permissions", back_button=False):
    permission = keys.return_keys(tg_id)[type]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for per in permission:
        kb.add(KeyboardButton(button_names[per]))
    if back_button:
        kb.add(KeyboardButton(button_names['back']))
    return kb


# –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler()
async def echo(message: types.Message):
    savelog.alllog("user_message", message)

    tg_id = message.from_user.id
    message_text = message.text
    message_datetime = message.date + timedelta(hours=3)
    user_key = keys.return_keys(tg_id)['key']

    if message_text in button_names.values():
        await keyboard_manager(message, tg_id, message_text, message_datetime)

    elif user_key is not None:
        await get_number(message, tg_id, user_key, message_text, message_datetime)

    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ü§∑‚Äç‚ôÇ ‚Äç\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=await keybord_generetion(message.from_user.id))


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (—Å–º–µ–Ω–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ)
async def keyboard_manager(message, tg_id, message_text, message_datetime):

    if message_text == button_names['get_number']:
        cooldown = await check_cd_for_number(keys.return_keys(tg_id)["cooldown"], message_datetime.time())
        if cooldown[0]:
            # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä', reply_markup=get_numberKB)
            number_types = keys.return_keys(tg_id)["type"]
            print(number_types)
            if len(number_types) > 1:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä', reply_markup=await keybord_generetion(tg_id, "type", True))
                keys.set_key(tg_id, 'waitmunbertype')
            else:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=backKB)
                savelog.alllog("bot_message", '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥', answer=(message.from_user.first_name, tg_id))
                forsaveindb.first_button(tg_id, message.from_user.full_name, number_types[0])
                keys.set_key(tg_id, 'city')
        else:
            await message.answer(f"–í—ã —Å–º–æ–∂–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑: {await seconds_to_cooldown_time(cooldown[1])}‚è≥",
                                 reply_markup=await keybord_generetion(tg_id))

    elif message_text in [button_names['truck'], button_names['car']]:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=backKB)
        savelog.alllog("bot_message", '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥', answer=(message.from_user.first_name, tg_id))

        if message_text == button_names['truck']:
            forsaveindb.first_button(tg_id, message.from_user.full_name, 'truck')
        elif message_text == button_names['car']:
            forsaveindb.first_button(tg_id, message.from_user.full_name, 'car')
        keys.set_key(tg_id, 'city')

    elif message_text == button_names['send_mileage']:
        if await check_date_2for_send_mileage(message_datetime.date(), tg_id):
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–µ–≥–∞', reply_markup=backKB)
            keys.set_key(tg_id, "photo")
        else:
            await message.answer('–î–æ–∂–¥–∏—Ç–µ—Å—å 25–æ–µ —á–∏—Å–ª–æüóì', reply_markup=await keybord_generetion(tg_id))

    elif message_text == button_names['back']:
        await message.answer('–í—ã –≤—ã–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=await keybord_generetion(tg_id))
        keys.set_key(tg_id, "end")


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
async def get_number(message, tg_id, user_key, message_text, message_datetime):

    if user_key == "reg":  # –µ—Å–ª–∏ –∫–ª—é—á "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", —Ç–æ
        preparationforloadinginGoogleSheets.registration(tg_id, message.text)  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É Google
        work_with_db.new_name(tg_id, message_text)
        keys.set_key(tg_id, "end")  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á
        answer_text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–≤—Ä–∞–≤–ª–µ–Ω–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç, –≤–∞–º –ø—Ä–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        await message.answer(answer_text)  # –¥–∞—ë–º –æ—Ç–≤–µ—Ç
        await send_message(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID: {tg_id}\n–ò–º—è: {message.text}\n–î–∞—Ç–∞: {message_datetime}')
        savelog.alllog("bot_message", answer_text,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                       answer=(message.from_user.first_name, message.from_user.id))
        savelog.alllog("bot_message", f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID: {tg_id}\n–ò–º—è: {message.text}\n–î–∞—Ç–∞: {message_datetime}')  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥


# ----------------------------------------------------------------------------------------------------------------------

    # –ü–ï–†–í–´–ô –®–ê–ì
    elif user_key == "city":    # –µ—Å–ª–∏ –∫–ª—é—á "–≥–æ—Ä–æ–¥", —Ç–æ
        forsaveindb.second_city(tg_id, message.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await message.answer('–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω‚úÖ')     # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        savelog.alllog("bot_message", '–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω‚úÖ',    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                       answer=(message.from_user.first_name, message.from_user.id))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≥–æ—Å.–Ω–æ–º–µ—Ä–∞')     # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Å.–Ω–æ–º–µ—Ä
        savelog.alllog("bot_message", '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≥–æ—Å.–Ω–æ–º–µ—Ä–∞',    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                       answer=(message.from_user.full_name, message.from_user.id))
        keys.set_key(tg_id, "gos")      # –º–µ–Ω—è–µ–º –∫–ª—é—á
        keys.set_cd(tg_id, str(message_datetime.time()))


    # –í–¢–û–†–û–ô –®–ê–ì
    elif user_key == "gos":     # –µ—Å–ª–∏ –∫–ª—é—á "–≥–æ—Å.–Ω–æ–º–µ—Ä", —Ç–æ
        try:
            if len(message.text) == 3:
                gosnumber = int(message.text)
                forsaveindb.thethird_gos(tg_id, gosnumber)    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await message.answer('–ù–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')     # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                savelog.alllog("bot_message", '–ù–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ',    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                               answer=(message.from_user.first_name, message.from_user.id))
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±—Ç–ª—è')     # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                savelog.alllog("bot_message", '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±—Ç–ª—è',    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                               answer=(message.from_user.first_name, message.from_user.id))
                keys.set_key(tg_id, "taxotrof")     # –º–µ–Ω—è–µ–º –∫–ª—é—á
            else:
                raise LenError
        except ValueError:
            # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùå\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≥–æ—Å.–Ω–æ–º–µ—Ä–∞\n–ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            savelog.alllog("bot_message",   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                           '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùå\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≥–æ—Å.–Ω–æ–º–µ—Ä–∞\n–ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                           answer=(message.from_user.first_name, message.from_user.id))
        except LenError:
            # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùå\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ 3 —Ü–∏—Ñ—Ä—ã –≥–æ—Å.–Ω–æ–º–µ—Ä–∞\n–ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            savelog.alllog("bot_message",   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                           '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùå\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ 3 —Ü–∏—Ñ—Ä—ã –≥–æ—Å.–Ω–æ–º–µ—Ä–∞\n–ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                           answer=(message.from_user.first_name, message.from_user.id))

    # –¢–†–ï–¢–ò–ô –®–ê–ì
    elif user_key == "taxotrof":
        if work_with_db.addmileage(tg_id, message.text, keys.return_keys(tg_id)["type"]):
            await message.answer('–ü—Ä–æ–±–µ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω‚úÖ')
            savelog.alllog("bot_message", '–ü—Ä–æ–±–µ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω‚úÖ',
                           answer=(message.from_user.first_name, message.from_user.id))
            keys.set_key(tg_id, "end")
            da = forsaveindb.fiveth_number(tg_id, message_datetime)
            savelog.alllog("bot_message",
                           f'–ù–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞: {da[0]} ‚úÖ –í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: {da[1][:-3]} –í—Ä–µ–º—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞: {da[2][:-3]} –í—Ä–µ–º—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞: {da[3][:-3]} \n-',
                           answer=(message.from_user.first_name, message.from_user.id))
            await message.answer(
                f'–ù–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞: {da[0]} ‚úÖ\n–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: {da[1][:-3]}\n–í—Ä–µ–º—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞: {da[2][:-3]}\n–í—Ä–µ–º—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞: {da[3][:-3]}',
                reply_markup=await keybord_generetion(tg_id))

        else:
            await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùå\n–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥ –º–µ–Ω—å—à–µ –≤–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ\n–ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            savelog.alllog("bot_message",
                           '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùå\n–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥ –º–µ–Ω—å—à–µ –≤–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ\n–ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                           answer=(message.from_user.first_name, message.from_user.id))


async def check_cd_for_number(user_cooldown, message_datetime):
    if user_cooldown is not None:
        user_cooldown =datetime.strptime(user_cooldown, '%H:%M:%S')
        message_datetime = datetime.strptime(str(message_datetime), '%H:%M:%S')
        difference = message_datetime - user_cooldown
        print(f'{message_datetime} - {user_cooldown} = {difference} | {difference.seconds}')
        if difference.seconds > cd_time:
            return True, None
        else:
            return False, cd_time - difference.seconds
    else:
        return True, None


async def check_date_2for_send_mileage(date, tg_id=0):
    if date.day == date_send_mileage or tg_id == 574802415:
        print(date, date_send_mileage)

        return True
    else:
        return False


async def seconds_to_cooldown_time(cooldown_seconds):
    minutes = cooldown_seconds // 60
    seconds = cooldown_seconds % 60
    if minutes > 0:
        return f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
    else:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
    global send_mileage_user_list
    tg_id = message.from_user.id
    tg_datetime = message.date + timedelta(hours=3)
    if keys.return_keys(tg_id)['key'] == 'photo':
        print(f'photo:{message.from_user.full_name} {tg_datetime.date()} {str(tg_datetime.time()).replace(":", ".")}')
        await message.photo[-1].download(f'photo/{message.from_user.full_name} {tg_datetime.date()} {str(tg_datetime.time()).replace(":", ".")}.jpg')
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ‚úÖ', reply_markup=await keybord_generetion(tg_id))
        await send_message(f'–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ!\nId: {tg_id}\n–ò–º—è: {work_with_db.get_value("drivers", "full_name", f"tg_id == {tg_id}")}\n–î–∞—Ç–∞: {tg_datetime}', photo=f'{message.from_user.full_name} {tg_datetime.date()} {str(tg_datetime.time()).replace(":", ".")}.jpg')
        send_mileage_user_list[str(tg_id)] = True
        keys.set_key(tg_id, 'end')


async def send_alert():
    print("It's noon!")
    a = {'574802415': False}
    for us_id in a:
        if not send_mileage_user_list[us_id]:
            await send_message(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–µ–≥–∞üñº', us_id)


async def stop_send_alert():
    aioschedule.clear('alert')
    print('alert end')


async def start_alerts():
    global send_mileage_user_list
    if await check_date_2for_send_mileage((datetime.now()+timedelta(hours=3)).date()):
        keys.db_open()
        db = keys.db
        send_mileage_user_list = {x: False for x in db.keys() if 'send_mileage' in db[x]["permissions"]}

        print(send_mileage_user_list)
        # aioschedule.every(2).hours.at('19:40').do(send_alert).tag('alert')
        aioschedule.every().day.at('09:01').do(send_alert).tag('alert')
        aioschedule.every().day.at('11:01').do(send_alert).tag('alert')
        aioschedule.every().day.at('13:01').do(send_alert).tag('alert')
        aioschedule.every().day.at('15:01').do(send_alert).tag('alert')
        aioschedule.every().day.at('17:01').do(send_alert).tag('alert')
        aioschedule.every().day.at('19:01').do(send_alert).tag('alert')
        aioschedule.every().day.at('19:10').do(stop_send_alert).tag('alert')


async def scheduler():
    aioschedule.every().days.at('00:00').do(start_alerts)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(5)


async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
